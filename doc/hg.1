.\"Generated by db2man.xsl. Don't modify this, modify the source.
.de Sh \" Subsection
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Ip \" List item
.br
.ie \\n(.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.TH "HG" 1 "" "" ""
.SH NAME
hg \- Mercurial source code management system
.SH "SYNOPSIS"


\fIhg\fR [\-v \-d \-q \-y] <command> [command options] [files]

.SH "DESCRIPTION"


The hg(1) command provides a command line interface to the Mercurial system\&.

.SH "COMMAND ELEMENTS"

.TP
files ...
indicates one or more filename or relative path filenames; see "FILE NAME PATTERNS" for information on pattern matching

.TP
path
indicates a path on the local machine

.TP
revision
indicates a changeset which can be specified as a changeset revision number, a tag, or a unique substring of the changeset hash value

.TP
repository path
either the pathname of a local repository or the URI of a remote repository\&. There are two available URI protocols, http:// which is fast and the old\-http:// protocol which is much slower but does not require a special server on the web host\&.

.SH "OPTIONS"

.TP
\-R, \-\-repository
repository root directory or symbolic path name

.TP
\-\-cwd
change working directory

.TP
\-y, \-\-noninteractive
do not prompt, assume \fIyes\fR for any required answers

.TP
\-q, \-\-quiet
suppress output

.TP
\-v, \-\-verbose
enable additional output

.TP
\-\-debug
enable debugging output

.TP
\-\-debugger
start debugger

.TP
\-\-traceback
print traceback on exception

.TP
\-\-time
time how long the command takes

.TP
\-\-profile
print command execution profile

.TP
\-\-version
output version information and exit

.TP
\-h, \-\-help
display help and exit

.SH "COMMANDS"

.TP
add [OPTION]... [FILE]...
Schedule files to be version controlled and added to the repository\&.

.nf
The files will be added to the repository at the next commit\&.
.fi

.nf
If no names are given, add all files in the repository\&.
.fi

.nf
options:
\-I, \-\-include  include names matching the given patterns
\-X, \-\-exclude  exclude names matching the given patterns
.fi

.TP
addremove [OPTION]... [FILE]...
Add all new files and remove all missing files from the repository\&.

.nf
New files are ignored if they match any of the patterns in \&.hgignore\&. As
with add, these changes take effect at the next commit\&.
.fi

.nf
options:
\-I, \-\-include  include names matching the given patterns
\-X, \-\-exclude  exclude names matching the given patterns
.fi

.TP
annotate [\-r REV] [\-a] [\-u] [\-d] [\-n] [\-c] FILE...
List changes in files, showing the revision id responsible for each line

.nf
This command is useful to discover who did a change or when a change took
place\&.
.fi

.nf
Without the \-a option, annotate will avoid processing files it
detects as binary\&. With \-a, annotate will generate an annotation
anyway, probably with undesirable results\&.
.fi

.nf
options:
\-r, \-\-rev        annotate the specified revision
\-a, \-\-text       treat all files as text
\-u, \-\-user       list the author
\-d, \-\-date       list the date
\-n, \-\-number     list the revision number (default)
\-c, \-\-changeset  list the changeset
\-I, \-\-include    include names matching the given patterns
\-X, \-\-exclude    exclude names matching the given patterns
.fi

.TP
bundle FILE DEST
Generate a compressed changegroup file collecting all changesets not found in the other repository\&.

.nf
This file can then be transferred using conventional means and
applied to another repository with the unbundle command\&. This is
useful when native push and pull are not available or when
exporting an entire repository is undesirable\&. The standard file
extension is "\&.hg"\&.
.fi

.nf
Unlike import/export, this exactly preserves all changeset
contents including permissions, rename data, and revision history\&.
.fi

.nf
options:
\-f, \-\-force  run even when remote repository is unrelated
.fi

.TP
cat [OPTION]... FILE...
Print the specified files as they were at the given revision\&. If no revision is given then the tip is used\&.

.nf
Output may be to a file, in which case the name of the file is
given using a format string\&.  The formatting rules are the same as
for the export command, with the following additions:
.fi

.nf
%s   basename of file being printed
%d   dirname of file being printed, or '\&.' if in repo root
%p   root\-relative path name of file being printed
.fi

.nf
options:
\-o, \-\-output   print output to file with formatted name
\-r, \-\-rev      print the given revision
\-I, \-\-include  include names matching the given patterns
\-X, \-\-exclude  exclude names matching the given patterns
.fi

.TP
clone [OPTION]... SOURCE [DEST]
Create a copy of an existing repository in a new directory\&.

.nf
If no destination directory name is specified, it defaults to the
basename of the source\&.
.fi

.nf
The location of the source is added to the new repository's
\&.hg/hgrc file, as the default to be used for future pulls\&.
.fi

.nf
For efficiency, hardlinks are used for cloning whenever the source
and destination are on the same filesystem\&.  Some filesystems,
such as AFS, implement hardlinking incorrectly, but do not report
errors\&.  In these cases, use the \-\-pull option to avoid
hardlinking\&.
.fi

.nf
See pull for valid source format details\&.
.fi

.nf
options:
\-U, \-\-noupdate  do not update the new working directory
\-r, \-\-rev       a changeset you would like to have after cloning
\-\-pull          use pull protocol to copy metadata
\-e, \-\-ssh       specify ssh command to use
\-\-remotecmd     specify hg command to run on the remote side
.fi

.TP
commit [OPTION]... [FILE]...
Commit changes to the given files into the repository\&.

.nf
If a list of files is omitted, all changes reported by "hg status"
will be committed\&.
.fi

.nf
If no commit message is specified, the editor configured in your hgrc
or in the EDITOR environment variable is started to enter a message\&.
.fi

.nf
options:
\-A, \-\-addremove  run addremove during commit
\-m, \-\-message    use <text> as commit message
\-l, \-\-logfile    read the commit message from <file>
\-d, \-\-date       record datecode as commit date
\-u, \-\-user       record user as commiter
\-I, \-\-include    include names matching the given patterns
\-X, \-\-exclude    exclude names matching the given patterns
.fi

.nf
aliases: ci
.fi

.TP
copy [OPTION]... [SOURCE]... DEST
Mark dest as having copies of source files\&. If dest is a directory, copies are put in that directory\&. If dest is a file, there can only be one source\&.

.nf
By default, this command copies the contents of files as they
stand in the working directory\&.  If invoked with \-\-after, the
operation is recorded, but no copying is performed\&.
.fi

.nf
This command takes effect in the next commit\&.
.fi

.nf
NOTE: This command should be treated as experimental\&. While it
should properly record copied files, this information is not yet
fully used by merge, nor fully reported by log\&.
.fi

.nf
options:
\-A, \-\-after    record a copy that has already occurred
\-f, \-\-force    forcibly copy over an existing managed file
\-I, \-\-include  include names matching the given patterns
\-X, \-\-exclude  exclude names matching the given patterns
.fi

.nf
aliases: cp
.fi

.TP
diff [\-a] [\-I] [\-X] [\-r REV1 [\-r REV2]] [FILE]...
Show differences between revisions for the specified files\&.

.nf
Differences between files are shown using the unified diff format\&.
.fi

.nf
When two revision arguments are given, then changes are shown
between those revisions\&. If only one revision is specified then
that revision is compared to the working directory, and, when no
revisions are specified, the working directory files are compared
to its parent\&.
.fi

.nf
Without the \-a option, diff will avoid generating diffs of files
it detects as binary\&. With \-a, diff will generate a diff anyway,
probably with undesirable results\&.
.fi

.nf
options:
\-r, \-\-rev               revision
\-a, \-\-text              treat all files as text
\-p, \-\-show\-function     show which function each change is in
\-w, \-\-ignore\-all\-space  ignore white space when comparing lines
\-I, \-\-include           include names matching the given patterns
\-X, \-\-exclude           exclude names matching the given patterns
.fi

.TP
export [\-a] [\-o OUTFILESPEC] REV...
Print the changeset header and diffs for one or more revisions\&.

.nf
The information shown in the changeset header is: author,
changeset hash, parent and commit comment\&.
.fi

.nf
Output may be to a file, in which case the name of the file is
given using a format string\&.  The formatting rules are as follows:
.fi

.nf
%%   literal "%" character
%H   changeset hash (40 bytes of hexadecimal)
%N   number of patches being generated
%R   changeset revision number
%b   basename of the exporting repository
%h   short\-form changeset hash (12 bytes of hexadecimal)
%n   zero\-padded sequence number, starting at 1
%r   zero\-padded changeset revision number
.fi

.nf
Without the \-a option, export will avoid generating diffs of files
it detects as binary\&. With \-a, export will generate a diff anyway,
probably with undesirable results\&.
.fi

.nf
With the \-\-switch\-parent option, the diff will be against the second
parent\&. It can be useful to review a merge\&.
.fi

.nf
options:
\-o, \-\-output     print output to file with formatted name
\-a, \-\-text       treat all files as text
\-\-switch\-parent  diff against the second parent
.fi

.TP
forget [OPTION]... FILE...
Undo an \fIhg add\fR scheduled for the next commit\&.

.nf
options:
\-I, \-\-include  include names matching the given patterns
\-X, \-\-exclude  exclude names matching the given patterns
.fi

.TP
grep [OPTION]... PATTERN [FILE]...
Search revisions of files for a regular expression\&.

.nf
This command behaves differently than Unix grep\&.  It only accepts
Python/Perl regexps\&.  It searches repository history, not the
working directory\&.  It always prints the revision number in which
a match appears\&.
.fi

.nf
By default, grep only prints output for the first revision of a
file in which it finds a match\&.  To get it to print every revision
that contains a change in match status ("\-" for a match that
becomes a non\-match, or "+" for a non\-match that becomes a match),
use the \-\-all flag\&.
.fi

.nf
options:
\-0, \-\-print0              end fields with NUL
\-\-all                     print all revisions that match
\-i, \-\-ignore\-case         ignore case when matching
\-l, \-\-files\-with\-matches  print only filenames and revs that match
\-n, \-\-line\-number         print matching line numbers
\-r, \-\-rev                 search in given revision range
\-u, \-\-user                print user who committed change
\-I, \-\-include             include names matching the given
                          patterns
\-X, \-\-exclude             exclude names matching the given
                          patterns
.fi

.TP
heads [\-b] [\-r <rev>]
Show all repository head changesets\&.

.nf
Repository "heads" are changesets that don't have children
changesets\&. They are where development generally takes place and
are the usual targets for update and merge operations\&.
.fi

.nf
options:
\-b, \-\-branches  show branches
\-\-style         display using template map file
\-r, \-\-rev       show only heads which are descendants of rev
\-\-template      display with template
.fi

.TP
help [COMMAND]
show help for a given command or all commands

.TP
identify
Print a short summary of the current state of the repo\&.

.nf
This summary identifies the repository state using one or two parent
hash identifiers, followed by a "+" if there are uncommitted changes
in the working directory, followed by a list of tags for this revision\&.
.fi

.nf
aliases: id
.fi

.TP
import [\-p NUM] [\-b BASE] [\-f] PATCH...
Import a list of patches and commit them individually\&.

.nf
If there are outstanding changes in the working directory, import
will abort unless given the \-f flag\&.
.fi

.nf
If a patch looks like a mail message (its first line starts with
"From " or looks like an RFC822 header), it will not be applied
unless the \-f option is used\&.  The importer neither parses nor
discards mail headers, so use \-f only to override the "mailness"
safety check, not to import a real mail message\&.
.fi

.nf
options:
\-p, \-\-strip  directory strip option for patch\&. This has the same
             meaning as the corresponding patch option (default:
             1)
\-b, \-\-base   base path
\-f, \-\-force  skip check for outstanding uncommitted changes
.fi

.nf
aliases: patch
.fi

.TP
incoming [\-p] [\-n] [\-M] [\-\-bundle FILENAME] [SOURCE]
Show new changesets found in the specified path/URL or the default pull location\&. These are the changesets that would be pulled if a pull was requested\&.

.nf
For remote repository, using \-\-bundle avoids downloading the changesets
twice if the incoming is followed by a pull\&.
.fi

.nf
See pull for valid source format details\&.
.fi

.nf
options:
\-M, \-\-no\-merges     do not show merges
\-f, \-\-force         run even when remote repository is unrelated
\-\-style             display using template map file
\-n, \-\-newest\-first  show newest record first
\-\-bundle            file to store the bundles into
\-p, \-\-patch         show patch
\-\-template          display with template
\-e, \-\-ssh           specify ssh command to use
\-\-remotecmd         specify hg command to run on the remote side
.fi

.nf
aliases: in
.fi

.TP
init [DEST]
Initialize a new repository in the given directory\&. If the given directory does not exist, it is created\&.

.nf
If no directory is given, the current directory is used\&.
.fi

.TP
locate [OPTION]... [PATTERN]...
Print all files under Mercurial control whose names match the given patterns\&.

.nf
This command searches the current directory and its
subdirectories\&.  To search an entire repository, move to the root
of the repository\&.
.fi

.nf
If no patterns are given to match, this command prints all file
names\&.
.fi

.nf
If you want to feed the output of this command into the "xargs"
command, use the "\-0" option to both this command and "xargs"\&.
This will avoid the problem of "xargs" treating single filenames
that contain white space as multiple filenames\&.
.fi

.nf
options:
\-r, \-\-rev       search the repository as it stood at rev
\-0, \-\-print0    end filenames with NUL, for use with xargs
\-f, \-\-fullpath  print complete paths from the filesystem root
\-I, \-\-include   include names matching the given patterns
\-X, \-\-exclude   exclude names matching the given patterns
.fi

.TP
log [OPTION]... [FILE]
Print the revision history of the specified files or the entire project\&.

.nf
By default this command outputs: changeset id and hash, tags,
non\-trivial parents, user, date and time, and a summary for each
commit\&. When the \-v/\-\-verbose switch is used, the list of changed
files and full commit message is shown\&.
.fi

.nf
options:
\-b, \-\-branches     show branches
\-k, \-\-keyword      search for a keyword
\-l, \-\-limit        limit number of changes displayed
\-r, \-\-rev          show the specified revision or range
\-M, \-\-no\-merges    do not show merges
\-\-style            display using template map file
\-m, \-\-only\-merges  show only merges
\-p, \-\-patch        show patch
\-\-template         display with template
\-I, \-\-include      include names matching the given patterns
\-X, \-\-exclude      exclude names matching the given patterns
.fi

.nf
aliases: history
.fi

.TP
manifest [REV]
Print a list of version controlled files for the given revision\&.

.nf
The manifest is the list of files being version controlled\&. If no revision
is given then the tip is used\&.
.fi

.TP
merge [\-b TAG] [\-f] [REV]
Merge the contents of the current working directory and the requested revision\&. Files that changed between either parent are marked as changed for the next commit and a commit must be performed before any further updates are allowed\&.

.nf
options:
\-b, \-\-branch  merge with head of a specific branch
\-f, \-\-force   force a merge with outstanding changes
.fi

.TP
outgoing [\-M] [\-p] [\-n] [DEST]
Show changesets not found in the specified destination repository or the default push location\&. These are the changesets that would be pushed if a push was requested\&.

.nf
See pull for valid destination format details\&.
.fi

.nf
options:
\-M, \-\-no\-merges     do not show merges
\-f, \-\-force         run even when remote repository is unrelated
\-p, \-\-patch         show patch
\-\-style             display using template map file
\-n, \-\-newest\-first  show newest record first
\-\-template          display with template
\-e, \-\-ssh           specify ssh command to use
\-\-remotecmd         specify hg command to run on the remote side
.fi

.nf
aliases: out
.fi

.TP
parents [\-b] [REV]
Print the working directory's parent revisions\&.

.nf
options:
\-b, \-\-branches  show branches
\-\-style         display using template map file
\-\-template      display with template
.fi

.TP
paths [NAME]
Show definition of symbolic path name NAME\&. If no name is given, show definition of available names\&.

.nf
Path names are defined in the [paths] section of /etc/mercurial/hgrc
and $HOME/\&.hgrc\&.  If run inside a repository, \&.hg/hgrc is used, too\&.
.fi

.TP
pull [\-u] [\-e FILE] [\-r REV]... [\-\-remotecmd FILE] [SOURCE]
Pull changes from a remote repository to a local one\&.

.nf
This finds all changes from the repository at the specified path
or URL and adds them to the local repository\&. By default, this
does not update the copy of the project in the working directory\&.
.fi

.nf
Valid URLs are of the form:
.fi

.nf
local/filesystem/path
http://[user@]host[:port][/path]
https://[user@]host[:port][/path]
ssh://[user@]host[:port][/path]
.fi

.nf
Some notes about using SSH with Mercurial:
\- SSH requires an accessible shell account on the destination machine
  and a copy of hg in the remote path or specified with as remotecmd\&.
\- /path is relative to the remote user's home directory by default\&.
  Use two slashes at the start of a path to specify an absolute path\&.
\- Mercurial doesn't use its own compression via SSH; the right thing
  to do is to configure it in your ~/\&.ssh/ssh_config, e\&.g\&.:
    Host *\&.mylocalnetwork\&.example\&.com
      Compression off
    Host *
      Compression on
  Alternatively specify "ssh \-C" as your ssh command in your hgrc or
  with the \-\-ssh command line option\&.
.fi

.nf
options:
\-u, \-\-update  update the working directory to tip after pull
\-e, \-\-ssh     specify ssh command to use
\-f, \-\-force   run even when remote repository is unrelated
\-r, \-\-rev     a specific revision you would like to pull
\-\-remotecmd   specify hg command to run on the remote side
.fi

.TP
push [\-f] [\-e FILE] [\-r REV]... [\-\-remotecmd FILE] [DEST]
Push changes from the local repository to the given destination\&.

.nf
This is the symmetrical operation for pull\&. It helps to move
changes from the current repository to a different one\&. If the
destination is local this is identical to a pull in that directory
from the current one\&.
.fi

.nf
By default, push will refuse to run if it detects the result would
increase the number of remote heads\&. This generally indicates the
the client has forgotten to sync and merge before pushing\&.
.fi

.nf
Valid URLs are of the form:
.fi

.nf
local/filesystem/path
ssh://[user@]host[:port][/path]
.fi

.nf
Look at the help text for the pull command for important details
about ssh:// URLs\&.
.fi

.nf
options:
\-f, \-\-force  force push
\-e, \-\-ssh    specify ssh command to use
\-r, \-\-rev    a specific revision you would like to push
\-\-remotecmd  specify hg command to run on the remote side
.fi

.TP
recover
Recover from an interrupted commit or pull\&.

.nf
This command tries to fix the repository status after an interrupted
operation\&. It should only be necessary when Mercurial suggests it\&.
.fi

.TP
remove [OPTION]... FILE...
Schedule the indicated files for removal from the repository\&.

.nf
This command schedules the files to be removed at the next commit\&.
This only removes files from the current branch, not from the
entire project history\&.  If the files still exist in the working
directory, they will be deleted from it\&.
.fi

.nf
options:
\-f, \-\-force    remove file even if modified
\-I, \-\-include  include names matching the given patterns
\-X, \-\-exclude  exclude names matching the given patterns
.fi

.nf
aliases: rm
.fi

.TP
rename [OPTION]... SOURCE... DEST
Mark dest as copies of sources; mark sources for deletion\&. If dest is a directory, copies are put in that directory\&. If dest is a file, there can only be one source\&.

.nf
By default, this command copies the contents of files as they
stand in the working directory\&.  If invoked with \-\-after, the
operation is recorded, but no copying is performed\&.
.fi

.nf
This command takes effect in the next commit\&.
.fi

.nf
NOTE: This command should be treated as experimental\&. While it
should properly record rename files, this information is not yet
fully used by merge, nor fully reported by log\&.
.fi

.nf
options:
\-A, \-\-after    record a rename that has already occurred
\-f, \-\-force    forcibly copy over an existing managed file
\-I, \-\-include  include names matching the given patterns
\-X, \-\-exclude  exclude names matching the given patterns
.fi

.nf
aliases: mv
.fi

.TP
revert [\-r REV] [NAME]...
In its default mode, it reverts any uncommitted modifications made to the named files or directories\&. This restores the contents of the affected files to an unmodified state\&.

.nf
Modified files are saved with a \&.orig suffix before reverting\&.
To disable these backups, use \-\-no\-backup\&.
.fi

.nf
Using the \-r option, it reverts the given files or directories to
their state as of an earlier revision\&.  This can be helpful to "roll
back" some or all of a change that should not have been committed\&.
.fi

.nf
Revert modifies the working directory\&.  It does not commit any
changes, or change the parent of the current working directory\&.
.fi

.nf
If a file has been deleted, it is recreated\&.  If the executable
mode of a file was changed, it is reset\&.
.fi

.nf
If names are given, all files matching the names are reverted\&.
.fi

.nf
If no arguments are given, all files in the repository are reverted\&.
.fi

.nf
options:
\-r, \-\-rev      revision to revert to
\-\-no\-backup    do not save backup copies of files
\-I, \-\-include  include names matching given patterns
\-X, \-\-exclude  exclude names matching given patterns
.fi

.TP
root
Print the root directory of the current repository\&.

.TP
serve [OPTION]...
Start a local HTTP repository browser and pull server\&.

.nf
By default, the server logs accesses to stdout and errors to
stderr\&.  Use the "\-A" and "\-E" options to log to files\&.
.fi

.nf
options:
\-A, \-\-accesslog   name of access log file to write to
\-d, \-\-daemon      run server in background
\-\-daemon\-pipefds  used internally by daemon mode
\-E, \-\-errorlog    name of error log file to write to
\-p, \-\-port        port to use (default: 8000)
\-a, \-\-address     address to use
\-n, \-\-name        name to show in web pages (default: working dir)
\-\-pid\-file        name of file to write process ID to
\-\-stdio           for remote clients
\-t, \-\-templates   web templates to use
\-\-style           template style to use
\-6, \-\-ipv6        use IPv6 in addition to IPv4
.fi

.TP
status [OPTION]... [FILE]...
Show changed files in the repository\&. If names are given, only files that match are shown\&.

.nf
The codes used to show the status of files are:
M = modified
A = added
R = removed
! = deleted, but still tracked
? = not tracked
I = ignored (not shown by default)
.fi

.nf
options:
\-m, \-\-modified   show only modified files
\-a, \-\-added      show only added files
\-r, \-\-removed    show only removed files
\-d, \-\-deleted    show only deleted (but tracked) files
\-u, \-\-unknown    show only unknown (not tracked) files
\-i, \-\-ignored    show ignored files
\-n, \-\-no\-status  hide status prefix
\-0, \-\-print0     end filenames with NUL, for use with xargs
\-I, \-\-include    include names matching the given patterns
\-X, \-\-exclude    exclude names matching the given patterns
.fi

.nf
aliases: st
.fi

.TP
tag [\-l] [\-m TEXT] [\-d DATE] [\-u USER] [\-r REV] NAME
Name a particular revision using <name>\&.

.nf
Tags are used to name particular revisions of the repository and are
very useful to compare different revision, to go back to significant
earlier versions or to mark branch points as releases, etc\&.
.fi

.nf
If no revision is given, the tip is used\&.
.fi

.nf
To facilitate version control, distribution, and merging of tags,
they are stored as a file named "\&.hgtags" which is managed
similarly to other project files and can be hand\-edited if
necessary\&.  The file '\&.hg/localtags' is used for local tags (not
shared among repositories)\&.
.fi

.nf
options:
\-l, \-\-local    make the tag local
\-m, \-\-message  message for tag commit log entry
\-d, \-\-date     record datecode as commit date
\-u, \-\-user     record user as commiter
\-r, \-\-rev      revision to tag
.fi

.TP
tags
List the repository tags\&.

.nf
This lists both regular and local tags\&.
.fi

.TP
tip [\-b] [\-p]
Show the tip revision\&.

.nf
options:
\-b, \-\-branches  show branches
\-\-style         display using template map file
\-p, \-\-patch     show patch
\-\-template      display with template
.fi

.TP
unbundle [\-u] FILE
Apply a compressed changegroup file generated by the bundle command\&.

.nf
options:
\-u, \-\-update  update the working directory to tip after unbundle
.fi

.TP
undo
Roll back the last pull or commit transaction on the repository, restoring the project to its earlier state\&.

.nf
This command should be used with care\&. There is only one level of
undo and there is no redo\&.
.fi

.nf
This command is not intended for use on public repositories\&. Once
a change is visible for pull by other users, undoing it locally is
ineffective\&. Furthemore a race is possible with readers of the
repository, for example an ongoing pull from the repository will
fail and rollback\&.
.fi

.TP
update [\-b TAG] [\-m] [\-C] [\-f] [REV]
Update the working directory to the specified revision\&.

.nf
If there are no outstanding changes in the working directory and
there is a linear relationship between the current version and the
requested version, the result is the requested version\&.
.fi

.nf
Otherwise the result is a merge between the contents of the
current working directory and the requested version\&. Files that
changed between either parent are marked as changed for the next
commit and a commit must be performed before any further updates
are allowed\&.
.fi

.nf
By default, update will refuse to run if doing so would require
merging or discarding local changes\&.
.fi

.nf
options:
\-b, \-\-branch  checkout the head of a specific branch
\-m, \-\-merge   allow merging of branches
\-C, \-\-clean   overwrite locally modified files
\-f, \-\-force   force a merge with outstanding changes
.fi

.nf
aliases: up checkout co
.fi

.TP
verify
Verify the integrity of the current repository\&.

.nf
This will perform an extensive check of the repository's
integrity, validating the hashes and checksums of each entry in
the changelog, manifest, and tracked files, as well as the
integrity of their crosslinks and indices\&.
.fi

.TP
version
output version and copyright information

.SH "FILE NAME PATTERNS"

.nf
Mercurial accepts several notations for identifying one or more
files at a time\&.
.fi

.nf
By default, Mercurial treats filenames as shell\-style extended
glob patterns\&.
.fi

.nf
Alternate pattern notations must be specified explicitly\&.
.fi

.nf
To use a plain path name without any pattern matching, start a
name with "path:"\&.  These path names must match completely, from
the root of the current repository\&.
.fi

.nf
To use an extended glob, start a name with "glob:"\&.  Globs are
rooted at the current directory; a glob such as "*\&.c" will match
files ending in "\&.c" in the current directory only\&.
.fi

.nf
The supported glob syntax extensions are "**" to match any string
across path separators, and "{a,b}" to mean "a or b"\&.
.fi

.nf
To use a Perl/Python regular expression, start a name with "re:"\&.
Regexp pattern matching is anchored at the root of the repository\&.
.fi

.nf
Plain examples:
.fi

.nf
path:foo/bar   a name bar in a directory named foo in the root of
               the repository
path:path:name a file or directory named "path:name"
.fi

.nf
Glob examples:
.fi

.nf
glob:*\&.c       any name ending in "\&.c" in the current directory
*\&.c            any name ending in "\&.c" in the current directory
**\&.c           any name ending in "\&.c" in the current directory, or
               any subdirectory
foo/*\&.c        any name ending in "\&.c" in the directory foo
foo/**\&.c       any name ending in "\&.c" in the directory foo, or any
               subdirectory
.fi

.nf
Regexp examples:
.fi

.nf
re:\&.*\\\&.c$      any name ending in "\&.c", anywhere in the repository
.fi

.SH "SPECIFYING SINGLE REVISIONS"

.nf
Mercurial accepts several notations for identifying individual
revisions\&.
.fi

.nf
A plain integer is treated as a revision number\&.  Negative
integers are treated as offsets from the tip, with \-1 denoting the
tip\&.
.fi

.nf
A 40\-digit hexadecimal string is treated as a unique revision
identifier\&.
.fi

.nf
A hexadecimal string less than 40 characters long is treated as a
unique revision identifier, and referred to as a short\-form
identifier\&.  A short\-form identifier is only valid if it is the
prefix of one full\-length identifier\&.
.fi

.nf
Any other string is treated as a tag name, which is a symbolic
name associated with a revision identifier\&.  Tag names may not
contain the ":" character\&.
.fi

.nf
The reserved name "tip" is a special tag that always identifies
the most recent revision\&.
.fi

.SH "SPECIFYING MULTIPLE REVISIONS"

.nf
When Mercurial accepts more than one revision, they may be
specified individually, or provided as a continuous range,
separated by the ":" character\&.
.fi

.nf
The syntax of range notation is [BEGIN]:[END], where BEGIN and END
are revision identifiers\&.  Both BEGIN and END are optional\&.  If
BEGIN is not specified, it defaults to revision number 0\&.  If END
is not specified, it defaults to the tip\&.  The range ":" thus
means "all revisions"\&.
.fi

.nf
If BEGIN is greater than END, revisions are treated in reverse
order\&.
.fi

.nf
A range acts as a closed interval\&.  This means that a range of 3:5
gives 3, 4 and 5\&.  Similarly, a range of 4:2 gives 4, 3, and 2\&.
.fi

.SH "ENVIRONMENT VARIABLES"

.TP
HGEDITOR
This is the name of the editor to use when committing\&. Defaults to the value of EDITOR\&.

.nf
(deprecated, use \&.hgrc)
.fi

.TP
HGMERGE
An executable to use for resolving merge conflicts\&. The program will be executed with three arguments: local file, remote file, ancestor file\&.

.nf
The default program is "hgmerge", which is a shell script provided
by Mercurial with some sensible defaults\&.
.fi

.nf
(deprecated, use \&.hgrc)
.fi

.TP
HGRCPATH
A list of files or directories to search for hgrc files\&. Item separator is ":" on Unix, ";" on Windows\&. If HGRCPATH is not set, platform default search path is used\&. If empty, only \&.hg/hgrc of current repository is read\&.

.nf
For each element in path, if a directory, all entries in directory
ending with "\&.rc" are added to path\&.  Else, element itself is
added to path\&.
.fi

.TP
HGUSER
This is the string used for the author of a commit\&.

.nf
(deprecated, use \&.hgrc)
.fi

.TP
EMAIL
If HGUSER is not set, this will be used as the author for a commit\&.

.TP
LOGNAME
If neither HGUSER nor EMAIL is set, LOGNAME will be used (with \fI@hostname\fR appended) as the author value for a commit\&.

.TP
EDITOR
This is the name of the editor used in the hgmerge script\&. It will be used for commit messages if HGEDITOR isn't set\&. Defaults to \fIvi\fR\&.

.TP
PYTHONPATH
This is used by Python to find imported modules and may need to be set appropriately if Mercurial is not installed system\-wide\&.

.SH "FILES"

.TP
\&.hgignore
This file contains regular expressions (one per line) that describe file names that should be ignored by hg\&.

.TP
\&.hgtags
This file contains changeset hash values and text tag names (one of each separated by spaces) that correspond to tagged versions of the repository contents\&.

.TP
/etc/mercurial/hgrc, $HOME/\&.hgrc, \&.hg/hgrc
This file contains defaults and configuration\&. Values in \&.hg/hgrc override those in $HOME/\&.hgrc, and these override settings made in the global /etc/mercurial/hgrc configuration\&. See hgrc(5) for details of the contents and format of these files\&.

.SH "BUGS"


Probably lots, please post them to the mailing list (See Resources below) when you find them\&.

.SH "SEE ALSO"


hgrc(5)

.SH "AUTHOR"


Written by Matt Mackall <mpm@selenic\&.com>

.SH "RESOURCES"


Main Web Site: \fIhttp://selenic.com/mercurial\fR


Source code repository: \fIhttp://selenic.com/hg\fR


Mailing list: \fIhttp://selenic.com/mailman/listinfo/mercurial\fR

.SH "COPYING"


Copyright (C) 2005 Matt Mackall\&. Free use of this software is granted under the terms of the GNU General Public License (GPL)\&.

