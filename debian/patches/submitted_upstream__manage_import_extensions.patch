Index: mercurial-0.9/mercurial/commands.py
===================================================================
--- mercurial-0.9.orig/mercurial/commands.py	2006-05-10 23:56:42.000000000 +0200
+++ mercurial-0.9/mercurial/commands.py	2006-05-11 00:48:48.000000000 +0200
@@ -566,12 +566,24 @@
         fns = h.keys()
         fns.sort()
         m = max(map(len, fns))
-        for f in fns:
-            if ui.verbose:
-                commands = cmds[f].replace("|",", ")
-                ui.write(" %s:\n      %s\n"%(commands, h[f]))
+        exts = sets.Set(map(extension_from, fns)) - sets.Set([''])
+        for mod in [''] + sorted(exts):
+            if ui.debugflag:
+                printmod=mod
             else:
-                ui.write(' %-*s   %s\n' % (m, f, h[f]))
+                printmod=os.path.basename(mod)
+            if len(exts) and mod=="":
+                ui.write("Commands provided by core mercurial:\n")
+            elif mod:
+                ui.write("\nCommands provided by the extension '%s':\n"%printmod)
+            for f in fns:
+                if extension_from(f) != mod:
+                    continue
+                if ui.verbose:
+                    commands = cmds[f].replace("|",", ")
+                    ui.write(" %s:\n      %s\n"%(commands,h[f]))
+                else:
+                    ui.write(' %-*s   %s\n' % (m, f, h[f]))
 
     # global options
     if ui.verbose:
@@ -3175,6 +3187,12 @@
 
     raise UnknownCommand(cmd)
 
+def extension_from(cmd, noext_text=''):
+    try:
+        return (find(cmd)[1])[3]
+    except IndexError:
+        return noext_text
+
 def catchterm(*args):
     raise util.SignalInterrupt
 
@@ -3251,7 +3269,10 @@
                     mod = importh(x[0])
             external.append(mod)
         except Exception, inst:
-            u.warn(_("*** failed to import extension %s: %s\n") % (x[0], inst))
+            mod=x[0]
+            if x[1]:
+                mod=("%s (%s)" % (mod, x[1]))
+            u.warn(_("*** failed to import extension %s: %s\n") % (mod, inst))
             if u.traceback:
                 traceback.print_exc()
                 return 1
@@ -3261,7 +3282,14 @@
         cmdtable = getattr(x, 'cmdtable', {})
         for t in cmdtable:
             if t in table:
-                u.warn(_("module %s overrides %s\n") % (x.__name__, t))
+                ext_from=extension_from(t)
+                if ext_from:
+                    ext_from=_(" (was in extension '%s')" % ext_from)
+                u.warn(_("extension %s overrides the command %s%s\n") %
+                       (x.__name__, t, ext_from))
+            ext_entry=list(x.cmdtable.get(t))
+            ext_entry.append(x.__name__)
+            x.cmdtable[t]=tuple(ext_entry)
         table.update(cmdtable)
 
     try:
Index: mercurial-0.9/hgext/hbisect.py
===================================================================
--- mercurial-0.9.orig/hgext/hbisect.py	2006-05-10 23:56:42.000000000 +0200
+++ mercurial-0.9/hgext/hbisect.py	2006-05-11 00:39:22.000000000 +0200
@@ -246,7 +246,7 @@
     return 0
 
 def bisect_run(ui, repo, cmd=None, *args):
-    """bisect extension: dichotomic search in the DAG of changesets
+    """dichotomic search in the DAG of changesets
 for subcommands see "hg bisect help\"
     """
     def help_(cmd=None, *args):
