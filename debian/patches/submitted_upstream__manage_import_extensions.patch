Index: mercurial-0.8/mercurial/commands.py
===================================================================
--- mercurial-0.8.orig/mercurial/commands.py	2006-01-30 01:01:08.000000000 +0100
+++ mercurial-0.8/mercurial/commands.py	2006-01-30 16:05:12.000000000 +0100
@@ -455,11 +455,18 @@
         fns.sort()
         m = max(map(len, fns))
         for f in fns:
+            mod=module_from(f, '')
             if ui.verbose:
+                if mod:
+                    mod=" [module %s]"%(mod)
                 commands = cmds[f].replace("|",", ")
-                ui.write(" %s:\n      %s\n"%(commands, h[f]))
+                ui.write(" %s:%s\n      %s\n"%(commands,mod,h[f]))
             else:
-                ui.write(' %-*s   %s\n' % (m, f, h[f]))
+                if mod:
+                    mod="[%s] "%(mod)
+                else:
+                    mod=" "
+                ui.write(' %-*s  %s%s\n' % (m, f, mod, h[f]))
 
     # global options
     if ui.verbose:
@@ -2540,6 +2547,12 @@
 
     raise UnknownCommand(cmd)
 
+def module_from(cmd, hg_core='core(hg)'):
+    try:
+        return (find(cmd)[1])[3]
+    except IndexError:
+        return hg_core
+
 class SignalInterrupt(Exception):
     """Exception raised on SIGTERM and SIGHUP."""
 
@@ -2606,7 +2619,10 @@
     external = []
     for x in u.extensions():
         def on_exception(exc, inst):
-            u.warn(_("*** failed to import extension %s\n") % x[1])
+            mod=x[0]
+            if x[1]:
+                mod=("%s (%s)" % (mod, x[1]))
+            u.warn(_("*** failed to import extension %s\n") % mod)
             u.warn("%s\n" % inst)
             if "--traceback" in sys.argv[1:]:
                 traceback.print_exc()
@@ -2634,7 +2650,10 @@
         cmdtable = getattr(x, 'cmdtable', {})
         for t in cmdtable:
             if t in table:
-                u.warn(_("module %s overrides %s\n") % (x.__name__, t))
+                u.warn(_("module %s overrides %s (was in module '%s')\n") % (x.__name__, t, module_from(t)))
+            ext_entry=list(x.cmdtable.get(t))
+            ext_entry.append(x.__name__)
+            x.cmdtable[t]=tuple(ext_entry)
         table.update(cmdtable)
 
     try:
