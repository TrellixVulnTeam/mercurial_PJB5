Suggest Debian packages for some optional dependencies.

diff -r 06d10c5c850e hgext/bugzilla.py
--- a/hgext/bugzilla.py
+++ b/hgext/bugzilla.py
@@ -308,7 +308,8 @@
         global MySQLdb
         MySQLdb = mysql
     except ImportError, err:
-        raise util.Abort(_('python mysql support not available: %s') % err)
+        raise util.Abort(_('python mysql support not available: %s') % err +
+                         _(' (try installing the %s package)') % 'python-mysqldb')
 
     if node is None:
         raise util.Abort(_('hook type %s does not pass a changeset id') %
diff -r 06d10c5c850e hgext/convert/bzr.py
--- a/hgext/convert/bzr.py
+++ b/hgext/convert/bzr.py
@@ -31,7 +31,8 @@
             # access bzrlib stuff
             branch
         except NameError:
-            raise NoRepo('Bazaar modules could not be loaded')
+            raise NoRepo('Bazaar modules could not be loaded' +
+                         _(' (try installing the %s package)') % 'bzr')
 
         if not os.path.exists(os.path.join(path, '.bzr')):
             raise NoRepo('%s does not look like a Bazaar repo' % path)
diff -r 06d10c5c850e hgext/convert/common.py
--- a/hgext/convert/common.py
+++ b/hgext/convert/common.py
@@ -20,11 +20,12 @@
 
 class MissingTool(Exception): pass
 
-def checktool(exe, name=None, abort=True):
+def checktool(exe, name=None, abort=True, debname=None):
     name = name or exe
     if not util.find_exe(exe):
         exc = abort and util.Abort or MissingTool
-        raise exc(_('cannot find required "%s" tool') % name)
+        raise exc(_('cannot find required "%s" tool') % name +
+                  (debname and _(' (try installing the %s package)') % debname or ''))
 
 class NoRepo(Exception): pass
 
diff -r 06d10c5c850e hgext/convert/cvs.py
--- a/hgext/convert/cvs.py
+++ b/hgext/convert/cvs.py
@@ -16,7 +16,7 @@
         if not os.path.exists(cvs):
             raise NoRepo("%s does not look like a CVS checkout" % path)
 
-        checktool('cvs')
+        checktool('cvs', debname='cvs')
         self.cmd = ui.config('convert', 'cvsps', 'builtin')
         cvspsexe = self.cmd.split(None, 1)[0]
         self.builtin = cvspsexe == 'builtin'
diff -r 06d10c5c850e hgext/convert/darcs.py
--- a/hgext/convert/darcs.py
+++ b/hgext/convert/darcs.py
@@ -27,10 +27,11 @@
         if not os.path.exists(os.path.join(path, '_darcs')):
             raise NoRepo("%s does not look like a darcs repo" % path)
 
-        checktool('darcs')
+        checktool('darcs', debname='darcs')
 
         if ElementTree is None:
-            raise util.Abort(_("Python ElementTree module is not available"))
+            raise util.Abort(_("Python ElementTree module is not available") +
+                             _(" (try installing the %s package)") % 'python-celementtree')
 
         if not os.path.exists(os.path.join(path, '_darcs', 'inventory')):
             raise NoRepo("%s does not look like a darcs repo" % path)
diff -r 06d10c5c850e hgext/convert/git.py
--- a/hgext/convert/git.py
+++ b/hgext/convert/git.py
@@ -32,7 +32,7 @@
         if not os.path.exists(path + "/objects"):
             raise NoRepo("%s does not look like a Git repo" % path)
 
-        checktool('git', 'git')
+        checktool('git', 'git', debname='git-core')
 
         self.path = path
 
diff -r 06d10c5c850e hgext/convert/gnuarch.py
--- a/hgext/convert/gnuarch.py
+++ b/hgext/convert/gnuarch.py
@@ -33,7 +33,8 @@
             if util.find_exe('tla'):
                 self.execmd = 'tla'
             else:
-                raise util.Abort(_('cannot find a GNU Arch tool'))
+                raise util.Abort(_('cannot find a GNU Arch tool') +
+                                 _(' (try installing the %s package)') % 'tla')
 
         commandline.__init__(self, ui, self.execmd)
 
diff -r 06d10c5c850e hgext/convert/monotone.py
--- a/hgext/convert/monotone.py
+++ b/hgext/convert/monotone.py
@@ -43,7 +43,7 @@
         if not os.path.exists(path):
             raise norepo
 
-        checktool('mtn', abort=False)
+        checktool('mtn', abort=False, debname='monotone')
 
         # test if there are any revisions
         self.rev = None
diff -r 06d10c5c850e hgext/convert/subversion.py
--- a/hgext/convert/subversion.py
+++ b/hgext/convert/subversion.py
@@ -34,6 +34,7 @@
 
 from common import NoRepo, MissingTool, commit, encodeargs, decodeargs
 from common import commandline, converter_source, converter_sink, mapfile
+from common import checktool
 
 try:
     from svn.core import SubversionException, Pool
@@ -155,16 +156,19 @@
         try:
             SubversionException
         except NameError:
-            raise MissingTool(_('Subversion python bindings could not be loaded'))
+            raise MissingTool(_('Subversion python bindings could not be loaded') +
+                              _(' (try installing the %s package)') % 'python-subversion')
 
         try:
             version = svn.core.SVN_VER_MAJOR, svn.core.SVN_VER_MINOR
             if version < (1, 4):
                 raise MissingTool(_('Subversion python bindings %d.%d found, '
-                                    '1.4 or later required') % version)
+                                    '1.4 or later required') % version +
+                                  _(' (try upgrading the %s package)') % 'python-subversion')
         except AttributeError:
             raise MissingTool(_('Subversion python bindings are too old, 1.4 '
-                                'or later required'))
+                                'or later required') +
+                              _(' (try upgrading the %s package)') % 'python-subversion')
 
         self.encoding = locale.getpreferredencoding()
         self.lastrevs = {}
@@ -960,6 +964,9 @@
         return self.join('hg-authormap')
 
     def __init__(self, ui, path):
+        checktool('svn', debname='subversion')
+        checktool('svnadmin', debname='subversion')
+
         converter_sink.__init__(self, ui, path)
         commandline.__init__(self, ui, 'svn')
         self.delete = []
diff -r 06d10c5c850e mercurial/hgweb/server.py
--- a/mercurial/hgweb/server.py
+++ b/mercurial/hgweb/server.py
@@ -259,7 +259,8 @@
                     from OpenSSL import SSL
                     ctx = SSL.Context(SSL.SSLv23_METHOD)
                 except ImportError:
-                    raise util.Abort(_("SSL support is unavailable"))
+                    raise util.Abort(_("SSL support is unavailable") +
+                                     _(" (try installing the %s package)") % 'python-openssl')
                 ctx.use_privatekey_file(ssl_cert)
                 ctx.use_certificate_file(ssl_cert)
                 sock = socket.socket(self.address_family, self.socket_type)
