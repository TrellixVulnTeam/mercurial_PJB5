Description: protect against malicious hg serve invocations
 modified patch for upstream to backport to wheezy, which doesn't have
 a readonly setting  
Author: Antoine Beaupr√© <anarcat@debian.org>
Bug-Debian: https://bugs.debian.org/861243
Origin: debian
Forwarded: not-needed
Last-Update: 2017-06-27

# HG changeset patch
# User Augie Fackler <augie@google.com>
# Date 1492021435 25200
# Node ID 77eaf9539499a1b8be259ffe7ada787d07857f80
# Parent  68f263f52d2e3e2798b4f1e55cb665c6b043f93b
dispatch: protect against malicious 'hg serve --stdio' invocations (sec)

Some shared-ssh installations assume that 'hg serve --stdio' is a safe
command to run for minimally trusted users. Unfortunately, the messy
implementation of argument parsing here meant that trying to access a
repo named '--debugger' would give the user a pdb prompt, thereby
sidestepping any hoped-for sandboxing. Serving repositories over HTTP(S)
is unaffected.

We're not currently hardening any subcommands other than 'serve'. If
your service exposes other commands to users with arbitrary repository
names, it is imperative that you defend against repository names of
'--debugger' and anything starting with '--config'.

The read-only mode of hg-ssh stopped working because it provided its hook
configuration to "hg serve --stdio" via --config parameter. This is banned for
security reasons now. This patch switches it to directly call ui.setconfig().
If your custom hosting infrastructure relies on passing --config to
"hg serve --stdio", you'll need to find a different way to get that configuration
into Mercurial, either by using ui.setconfig() as hg-ssh does in this patch,
or by placing an hgrc file someplace where Mercurial will read it.

mitrandir@fb.com provided some extra fixes for the dispatch code and
for hg-ssh in places that I overlooked.

--- a/mercurial/dispatch.py
+++ b/mercurial/dispatch.py
@@ -6,6 +6,7 @@
 # GNU General Public License version 2 or any later version.
 
 from i18n import _
+import getopt
 import os, sys, atexit, signal, pdb, socket, errno, shlex, time, traceback, re
 import util, commands, hg, fancyopts, extensions, hook, error
 import cmdutil, encoding
@@ -76,6 +77,37 @@ def _runcatch(req):
     except ValueError:
         pass # happens if called in a thread
 
+    realcmd = None
+    try:
+        cmdargs = fancyopts.fancyopts(req.args[:], commands.globalopts, {})
+        cmd = cmdargs[0]
+        aliases, entry = cmdutil.findcmd(cmd, commands.table, False)
+        realcmd = aliases[0]
+    except (error.UnknownCommand, error.AmbiguousCommand,
+            IndexError, getopt.GetoptError):
+        # Don't handle this here. We know the command is
+        # invalid, but all we're worried about for now is that
+        # it's not a command that server operators expect to
+        # be safe to offer to users in a sandbox.
+        pass
+    if realcmd == 'serve' and '--stdio' in cmdargs:
+        # We want to constrain 'hg serve --stdio' instances pretty
+        # closely, as many shared-ssh access tools want to grant
+        # access to run *only* 'hg -R $repo serve --stdio'. We
+        # restrict to exactly that set of arguments, and prohibit
+        # any repo name that starts with '--' to prevent
+        # shenanigans wherein a user does something like pass
+        # --debugger or --config=ui.debugger=1 as a repo
+        # name. This used to actually run the debugger.
+        if (len(req.args) != 4 or
+            req.args[0] != '-R' or
+            req.args[1].startswith('--') or
+            req.args[2] != 'serve' or
+            req.args[3] != '--stdio'):
+            ui.warn(_("abort: potentially unsafe serve --stdio invocation: %r\n") %
+                    (req.args,))
+            return -1
+
     try:
         try:
             # enter the debugger before command execution
--- a/tests/test-ssh.t
+++ b/tests/test-ssh.t
@@ -278,6 +278,19 @@ Test remote paths with spaces (issue2983
   $ hg id --ssh "python \"$TESTDIR/dummyssh\"" "ssh://user@dummy/a repo"
   3fb238f49e8c
 
+Make sure hg is really paranoid in serve --stdio mode. It used to be
+possible to get a debugger REPL by specifying a repo named --debugger.
+  $ hg -R --debugger serve --stdio
+  abort: potentially unsafe serve --stdio invocation: ['-R', '--debugger', 'serve', '--stdio']
+  [255]
+  $ hg -R --config=ui.debugger=yes serve --stdio
+  abort: potentially unsafe serve --stdio invocation: ['-R', '--config=ui.debugger=yes', 'serve', '--stdio']
+  [255]
+Abbreviations of 'serve' also don't work, to avoid shenanigans.
+  $ hg -R narf serv --stdio
+  abort: potentially unsafe serve --stdio invocation: ['-R', 'narf', 'serv', '--stdio']
+  [255]
+
 Test hg-ssh using a helper script that will restore PYTHONPATH (which might
 have been cleared by a hg.exe wrapper) and invoke hg-ssh with the right
 parameters:
--- a/tests/test-hup.t
+++ b/tests/test-hup.t
@@ -3,7 +3,7 @@ Test hangup signal in the middle of tran
   $ "$TESTDIR/hghave" serve fifo || exit 80
   $ hg init
   $ mkfifo p
-  $ hg serve --stdio < p 1>out 2>&1 &
+  $ hg -R . serve --stdio < p 1>out 2>&1 &
   $ P=$!
 
 Do test while holding fifo open
@@ -11,7 +11,16 @@ Do test while holding fifo open
   $ (
   > echo lock
   > echo addchangegroup
-  > while [ ! -s .hg/store/journal ]; do sleep 0; done
+  > start=`date +%s`
+  > # 10 second seems much enough to let the server catch up
+  > deadline=`expr $start + 10`
+  > while [ ! -s .hg/store/journal ]; do
+  >     sleep 0;
+  >     if [ `date +%s` -gt $deadline ]; then
+  >         echo "transaction did not start after 10 seconds" >&2;
+  >         exit 1;
+  >     fi
+  > done
   > kill -HUP $P
   > ) > p
 
